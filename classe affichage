class Affichage(tk.Tk):
    def __init__(self, graph, route):
        super().__init__()
        self.graph = graph
        self.route = route
        
        self.title("Groupe Audrey Maeva Kanelle")

        # appuyer sur la touche echap pour fermer le programme
        self.bind_all("<Escape>", self.fermer)
        # appuyer sur la touche M pour afficher la matrice de cout
        self.bind_all("<m>", self.afficher_matrice)
        # Forcer le focus sur la fenêtre principale
        self.focus_force()
        
        # Canvas pour dessiner
        self.canvas = tk.Canvas(self, width=LARGEUR, height=HAUTEUR, bg="white")
        self.canvas.pack()

        # zone d'affichage de la matrice de cout
        self.label_matrice = tk.Label(self, text="", anchor="w")
        self.label_matrice.pack(pady=10)

        # zone d'affichage du nombre d'iteration et de la meilleur distance
        self.label_info = tk.Label(self, anchor="w", justify="left")
        self.label_info.pack(pady=10)

    def change_route(self):
        lieux_dict = {lieu.nom: (lieu.x, lieu.y, lieu.nom) for lieu in self.graph.liste_lieux}
        route_heuristique = [lieux_dict[num] for num in self.route.ordre]
        return route_heuristique

    def fermer(self, event=None):
        print("ESC press detected! Closing window.")  # Debug print
        self.destroy()

    def afficher_points(self, route_points):
        # Affiche chaque point de la route comme un cercle avec son numéro
        for i, (x, y, nom) in enumerate(route_points):
            if nom == 0:
                # Cercle pour le point
                self.canvas.create_oval(
                    x - RAYON, y - RAYON,
                    x + RAYON, y + RAYON,
                    fill="red", outline="black"
                )
            else:
                # Cercle pour le point
                self.canvas.create_oval(
                    x - RAYON, y - RAYON,
                    x + RAYON, y + RAYON,
                    fill="lightgrey", outline="black"
                )

            # Affiche le numéro du point
            self.canvas.create_text(x, y, text=str(nom), fill="black")
            # Affiche l'ordre de passage du point
            self.canvas.create_text(x, y - 30, text=str(i), fill="black")

    def afficher_route(self, route_points, color):
        # Trace les lignes entre les points de la route
        print("texte",route_points)
        for i in range(len(route_points) - 1):
            x1, y1 = route_points[i][0], route_points[i][1]
            x2, y2 = route_points[i + 1][0], route_points[i + 1][1],
            print(x1, x2, y1, y2)
            self.canvas.create_line(x1, y1, x2, y2, fill=color, dash=(5, 2))

        # Relie le dernier point au premier pour fermer la route
        x1, y1 = route_points[-1][0], route_points[-1][1]
        x2, y2 = route_points[0][0], route_points[0][1]
        self.canvas.create_line(x1, y1, x2, y2, fill=color, dash=(5, 2))
        

    def afficher_matrice(self, event=None):
        # Convertir la matrice en texte pour l'affichage
        matrice_texte = "\n".join(["\t".join(map(str, ligne)) for ligne in self.graph.matrice_cout_od])
        self.label_matrice.config(text=matrice_texte)  # Afficher dans le label
 
    def mettre_a_jour_label_info(self):
       # Met à jour le label avec un seul texte sans accumulation
       self.label_info.config(text = "La distance est : " + str(self.route.distance) + " pour "+str(10) + " itérations") 
    
    def aff_best_routes(self, liste_best_route):
        if len(liste_best_route) >= 2:
            for i in range(1,len(liste_best_route)):
                self.afficher_points(liste_best_route[i])
                self.afficher_route(liste_best_route[i],'grey')
        self.afficher_points(liste_best_route[0])
        self.afficher_route(liste_best_route[0], 'blue')
    
    def run(self):
        self.mettre_a_jour_label_info()
        self.aff_best_routes()
        self.mainloop()

class TSP_GA:
    def __init__(self, graph, file_path, taille_population=NB_LIEUX, iterations=100, taux_mutation=0.1):
        self.graph = graph  # Matrice des distances
        self.file_path = file_path
        self.taille_population = taille_population
        self.iterations = iterations
        self.taux_mutation = taux_mutation
        self.nb_best_routes = taille_population // 2
        self.population = self.generer_population()

    def generer_population(self):
        population = []
        for i in range(self.taille_population):
            route = self.graph.route_ppv(random.randint(0, NB_LIEUX - 1))
            route.distance = self.graph.calcul_distance_route(route.ordre)
            population.append(route)
        return population

    def best_routes(self):
        return sorted(self.population, key=lambda route: route.distance)[:self.nb_best_routes]

    def croisement_OX1(self, parent1, parent2):
        """ Croisement OX1 (Order Crossover) """
        debut, fin = sorted(random.sample(range(NB_LIEUX), 2))

        ordre = [None] * NB_LIEUX
        ordre[debut:fin] = parent1[debut:fin]  # Garde une section du premier parent

        reste = [lieu for lieu in parent2 if lieu not in ordre]
        index = 0

        for i in range(NB_LIEUX):
            if ordre[i] is None:
                ordre[i] = reste[index]
                index += 1
        ordre.append(ordre[0])
        enfant = Route()
        enfant.ordre = ordre
        enfant.distance = self.graph.calcul_distance_route(ordre)
        return enfant

    def mutation(self, route):
        """ Applique une mutation sans modifier le point de départ et d'arrivée """
        if random.random() < self.taux_mutation:
            i, j = random.sample(range(1, len(route) - 1), 2)  # Éviter le premier et dernier élément
            route[i], route[j] = route[j], route[i]

        # Assurer que le premier et dernier élément sont toujours identiques
        route[-1] = route[0]

        return route

    def evolution(self, lieu_depart=0):
        meilleure_pop = self.best_routes()
        affichage = Affichage(self.graph, meilleure_pop[0])

        meilleure_route = min(self.population, key=lambda route: route.distance)
        ancienne_meilleure_distance = meilleure_route.distance  # Initialisation de la première meilleure distance

        """ Effectue l'évolution sur plusieurs générations """
        for i in range(self.iterations):
            # Sélection et reproduction
            for _ in range(self.nb_best_routes // 2):
                parent1 = self.best_routes()[random.randint(0, self.nb_best_routes - 1)]
                parent2 = self.best_routes()[random.randint(0, self.nb_best_routes - 1)]
                parent3 = self.best_routes()[random.randint(0, self.nb_best_routes - 1)]
                parent4 = self.best_routes()[random.randint(0, self.nb_best_routes - 1)]
                enfant1 = self.croisement_OX1(parent1.ordre, parent2.ordre)
                enfant2 = self.croisement_OX1(parent2.ordre, parent3.ordre)
                enfant3 = self.croisement_OX1(parent3.ordre, parent4.ordre)
                enfant4 = self.croisement_OX1(parent4.ordre, parent1.ordre)

                meilleure_pop.append(Route(self.mutation(enfant1.ordre), self.graph.calcul_distance_route(self.mutation(enfant1.ordre))))
                meilleure_pop.append(Route(self.mutation(enfant2.ordre), self.graph.calcul_distance_route(self.mutation(enfant2.ordre))))
                meilleure_pop.append(Route(self.mutation(enfant3.ordre), self.graph.calcul_distance_route(self.mutation(enfant3.ordre))))
                meilleure_pop.append(Route(self.mutation(enfant4.ordre), self.graph.calcul_distance_route(self.mutation(enfant4.ordre))))

                # Remplacement de la population
                self.population = meilleure_pop
                meilleure_route = min(self.population, key=lambda route: route.distance)

            # Si la meilleure distance a changé, on continue les itérations
            if abs(meilleure_route.distance - ancienne_meilleure_distance) < 1e-6:  # Critère de tolérance
                print(f"La meilleure route a été trouvée à l'itération {i}. Arrêt de l'évolution.")
                break  # On arrête l'évolution si la distance n'a pas changé

            # Mise à jour de l'affichage pour chaque itération
            affichage.route = meilleure_route
            affichage.canvas.delete("text_ordre")
            affichage.canvas.delete("lines")
            affichage.aff_best_routes(self.best_routes())

            affichage.mettre_a_jour_label_info(i, self.iterations)
            affichage.update()

            # Mise à jour de la meilleure distance précédemment affichée
            ancienne_meilleure_distance = meilleure_route.distance

        return f"La meilleure route est {str(meilleure_route.ordre)} et sa distance est de {str(meilleure_route.distance)}"
