import csv
import time

import numpy as np
import random
import tkinter as tk

NB_LIEUX = 20
LIEU_DEPART = random.randint(0, NB_LIEUX-1)
LARGEUR = 800
HAUTEUR = 600
RAYON = 20


class Lieu:
    def __init__(self, x=None, y=None, nom=None):
        if (x is None):
            x = np.random.rand() * LARGEUR
        if (y is None):
            y = np.random.rand() * HAUTEUR
        self.x = float(x)
        self.y = float(y)
        self.nom = nom

    def get_x(self):
        return self.x

    def get_y(self):
        return self.y

    def set_x(self, x):
        self.x = x

    def set_y(self, y):
        self.y = y

    def calcul_distance(self, lieu2):
        return np.sqrt((lieu2.x - self.x) ** 2 + (lieu2.y - self.y) ** 2)

    def __repr__(self):
        return "(" + str(round(self.x, 2)) + "," + str(round(self.y, 2)) + "," + str(self.nom) + ")"


class Route:

    def __init__(self, ordre=None, distance=None):
        if (ordre is None):
            # créer une route aléatoire
            self.ordre = [0]
            self.ordre.extend(random.sample(range(1, NB_LIEUX), NB_LIEUX - 1))
            self.ordre.append(0)
        else:
            self.ordre = ordre
            '''if len(ordre) == NB_LIEUX + 1 and ordre[0] == ordre[len(ordre)-1]:
                self.ordre = ordre[:]
            else:
                print("La route est incorrecte", self.ordre)'''
        self.distance = distance

    def get_ordre(self):
        return self.ordre

    def set_ordre(self, ordre):
        self.ordre = ordre

    def __eq__(self, autre_route):
        return self.ordre == autre_route.ordre

    def __neq__(self, autre_route):
        return self.ordre != autre_route.ordre

    def __lt__(self, autre_route):
        return self.distance < autre_route.distance

    def __gt__(self, autre_route):
        return self.distance > autre_route.distance

    def __le__(self, autre_route):
        return self.distance <= autre_route.distance

    def __ge__(self, autre_route):
        return self.distance >= autre_route.distance

    def __repr__(self):
        return "Ordre : " + str(self.ordre) + " ,distance : " + str(self.distance)


class Graph:

    def __init__(self, file_path):
        '''if liste_lieux is None:
            self.liste_lieux = [Lieu() for i in range(NB_LIEUX)]
        else:
            self.liste_lieux = self.charger_graph(file_path)'''
        self.liste_lieux = self.charger_graph(file_path)
        self.matrice_cout_od = self.calcul_matrice_cout_od()

    def get_liste_lieux(self):
        return self.liste_lieux

    def set_liste_lieux(self, liste_lieux):
        self.liste_lieux = liste_lieux

    def calcul_matrice_cout_od(self):
        matrice_od = []
        for i in range(NB_LIEUX):
            row = []
            for j in range(NB_LIEUX):
                row.append(self.liste_lieux[i].calcul_distance(self.liste_lieux[j]))
            matrice_od.append(row)
        return matrice_od

    def calcul_distance_route(self, ordre):
        lieu_actuel = self.liste_lieux[ordre[0]]
        somme_distance = 0
        for i in range(1, len(ordre)):
            somme_distance += Lieu.calcul_distance(self.liste_lieux[lieu_actuel.nom],
                                                   self.liste_lieux[ordre[i]])
            lieu_actuel = self.liste_lieux[ordre[i]]
        return somme_distance

    def plus_proche_voisin(self, lieu_depart, lieux_voisins):

        ligne = self.matrice_cout_od[lieu_depart.nom]
        indices_restants = [l.nom for l in lieux_voisins]

        # Filtrer la ligne pour ne garder que les colonnes des lieux restants
        ligne_filtree = [ligne[i] for i in indices_restants]
        min_value = {"dist": ligne_filtree[0], "name": None}
        for i, dist in enumerate(ligne_filtree):
            if i != lieu_depart:
                if dist < min_value['dist'] or min_value['dist'] == 0:
                    min_value["dist"], min_value['name'] = dist, lieux_voisins[i].nom

        if min_value['name'] is None and lieux_voisins:
            min_value['name'] = lieux_voisins[0].nom

        lieu_pp = next((lieu for lieu in lieux_voisins if lieu.nom == min_value["name"]), None)
        return lieu_pp

    def route_ppv(self, nom_lieu_depart) -> Route():
        lieu_actuel = self.liste_lieux[nom_lieu_depart]
        ordre = [nom_lieu_depart]
        lieux_restants = self.liste_lieux.copy()
        for lieu in lieux_restants:
            if lieu.nom == nom_lieu_depart:
                lieux_restants.remove(lieu)
        while lieux_restants:
            lieu_suivant = self.plus_proche_voisin(lieu_actuel, lieux_restants)
            ordre.append(lieu_suivant.nom)
            lieux_restants.remove(lieu_suivant)
            lieu_actuel = lieu_suivant
        ordre.append(nom_lieu_depart)
        return Route(ordre)

    def charger_graph(self, fichier_lieux):
        """Charge la liste des lieux à partir d'un fichier CSV."""
        self.liste_lieux = []  # Réinitialisation
        try:
            with open(fichier_lieux, newline='', encoding='utf-8') as csvfile:
                reader = csv.reader(csvfile)
                next(reader)  # Ignorer l'en-tête si présent
                for i, row in enumerate(reader):
                    x, y = map(float, row)  # Convertir les coordonnées en flottants
                    self.liste_lieux.append(Lieu(x=x, y=y, nom=i))
            return self.liste_lieux
        except Exception as e:
            print(f"Erreur lors du chargement du fichier des lieux : {e}")

    def charger_matrice_od(self, fichier_matrice):
        """Charge la matrice de distances à partir d'un fichier CSV."""
        try:
            with open(fichier_matrice, newline='', encoding='utf-8') as csvfile:
                reader = csv.reader(csvfile)
                self.matrice_od = np.array([list(map(float, row)) for row in reader])
        except Exception as e:
            print(f"Erreur lors du chargement de la matrice de distances : {e}")


class Affichage(tk.Tk):
    def __init__(self, graph, route):
        super().__init__()
        self.graph = graph
        self.route = route
        self.title("Groupe Audrey Maeva Kanelle")

        # appuyer sur la touche echap pour fermer le programme
        self.bind_all("<Escape>", self.fermer)
        # appuyer sur la touche M pour afficher la matrice de cout
        self.bind_all("<m>", self.afficher_matrice)
        # Forcer le focus sur la fenêtre principale
        self.focus_force()

        # Canvas pour dessiner
        self.canvas = tk.Canvas(self, width=LARGEUR, height=HAUTEUR, bg="white")
        self.canvas.pack()

        # zone d'affichage de la matrice de cout
        self.label_matrice = tk.Label(self, text="", anchor="w")
        self.label_matrice.pack(pady=10)

        # zone d'affichage du nombre d'iteration et de la meilleur distance
        self.label_info = tk.Label(self, anchor="w", justify="left")
        self.label_info.pack(pady=10)

    def change_route(self, route):
        lieux_dict = {lieu.nom: (lieu.x, lieu.y, lieu.nom) for lieu in self.graph.liste_lieux}
        route_heuristique = [lieux_dict[num] for num in route.ordre]
        return route_heuristique

    def fermer(self, event=None):
        print("ESC press detected! Closing window.")  # Debug print
        self.destroy()

    def afficher_points(self, route_points, lieux_depart=LIEU_DEPART, ordre=False):

        # Affiche chaque point de la route comme un cercle avec son numéro
        for i, (x, y, nom) in enumerate(route_points[:-1]):
            if nom == lieux_depart:
                # Cercle pour le point
                self.canvas.create_oval(
                    x - RAYON, y - RAYON,
                    x + RAYON, y + RAYON,
                    fill="red", outline="black", tags="points"
                )
            else:
                # Cercle pour le point
                self.canvas.create_oval(
                    x - RAYON, y - RAYON,
                    x + RAYON, y + RAYON,
                    fill="lightgrey", outline="black", tags="points"
                )

            # Affiche le numéro du point
            self.canvas.create_text(x, y, text=str(nom), fill="black")
            # Affiche l'ordre de passage du point
            if ordre:
                self.canvas.create_text(x, y - 30, text=str(i), fill="black", tags="ordre")

    def afficher_route(self, route_points, color):
        # Trace les lignes entre les points de la route
        for i in range(len(route_points) - 1):
            x1, y1 = route_points[i][0], route_points[i][1]
            x2, y2 = route_points[i + 1][0], route_points[i + 1][1],
            self.canvas.create_line(x1, y1, x2, y2, fill=color, dash=(5, 2), tags="lines")

        # Relie le dernier point au premier pour fermer la route
        x1, y1 = route_points[-1][0], route_points[-1][1]
        x2, y2 = route_points[0][0], route_points[0][1]
        self.canvas.create_line(x1, y1, x2, y2, fill=color, dash=(5, 2), tags="lines")

    def afficher_matrice(self, event=None):
        # Convertir la matrice en texte pour l'affichage
        matrice_texte = "\n".join(["\t".join(map(str, ligne)) for ligne in self.graph.matrice_cout_od])
        self.label_matrice.config(text=matrice_texte)  # Afficher dans le label

    def mettre_a_jour_label_info(self, iteration, iterations_total):
        # Met à jour le label avec un seul texte sans accumulation
        self.label_info.config(
            text="La distance est : " + str(self.route.distance) + " pour " + str(iteration) + "/" + str(iterations_total))

    def aff_best_routes(self, liste_best_route):
        if len(liste_best_route) >= 2:
            for i in range(1, len(liste_best_route)):
                self.afficher_points(self.change_route(liste_best_route[i]),liste_best_route[i].ordre[0])
                self.afficher_route(self.change_route(liste_best_route[i]), 'grey')
        self.afficher_points(self.change_route(liste_best_route[0]),liste_best_route[0].ordre[0], True)
        self.afficher_route(self.change_route(liste_best_route[0]), 'blue')

    def run(self, liste_best_route):
        self.mettre_a_jour_label_info()
        self.aff_best_routes(liste_best_route)
        self.mainloop()



class TSP_GA:
    def __init__(self, graph, file_path, taille_population=NB_LIEUX, iterations=100, taux_mutation=0.1):
        self.graph = graph  # Matrice des distances
        self.file_path = file_path
        self.taille_population = taille_population
        self.iterations = iterations
        self.taux_mutation = taux_mutation
        self.nb_best_routes = taille_population//2
        self.population = self.generer_population()


    def generer_population(self):
        population = []
        for i in range(self.taille_population):
            route = self.graph.route_ppv(random.randint(0, NB_LIEUX-1))
            route.distance = self.graph.calcul_distance_route(route.ordre)
            population.append(route)
        return population

    def best_routes(self):
        return sorted(self.population, key=lambda route: route.distance)[:self.nb_best_routes]

    def croisement_OX1(self, parent1, parent2):
        """ Croisement OX1 (Order Crossover) """
        debut, fin = sorted(random.sample(range(NB_LIEUX), 2))

        ordre = [None] * NB_LIEUX
        ordre[debut:fin] = parent1[debut:fin]  # Garde une section du premier parent

        reste = [lieu for lieu in parent2 if lieu not in ordre]
        index = 0

        for i in range(NB_LIEUX):
            if ordre[i] is None:
                ordre[i] = reste[index]
                index += 1
        ordre.append(ordre[0])
        enfant = Route()
        enfant.ordre = ordre
        enfant.distance = self.graph.calcul_distance_route(ordre)
        return enfant

    def mutation(self, route):
        """ Applique une mutation sans modifier le point de départ et d'arrivée """
        if random.random() < self.taux_mutation:
            i, j = random.sample(range(1, len(route) - 1), 2)  # Éviter le premier et dernier élément
            route[i], route[j] = route[j], route[i]

        # Assurer que le premier et dernier élément sont toujours identiques
        route[-1] = route[0]

        return route

    def evolution(self, lieu_depart = 0):
        meilleure_pop = self.best_routes()
        affichage = Affichage(self.graph, meilleure_pop[0])
        """ Effectue l'évolution sur plusieurs générations """
        for i in range(self.iterations):
            # Sélection et reproduction
            for _ in range(self.nb_best_routes//2):
                parent1 = self.best_routes()[random.randint(0, self.nb_best_routes-1)]
                parent2 = self.best_routes()[random.randint(0, self.nb_best_routes-1)]
                parent3 = self.best_routes()[random.randint(0, self.nb_best_routes - 1)]
                parent4 = self.best_routes()[random.randint(0, self.nb_best_routes - 1)]
                enfant1 = self.croisement_OX1(parent1.ordre, parent2.ordre)
                enfant2 = self.croisement_OX1(parent2.ordre, parent3.ordre)
                enfant3 = self.croisement_OX1(parent3.ordre, parent4.ordre)
                enfant4 = self.croisement_OX1(parent4.ordre, parent1.ordre)
                meilleure_pop.append(Route(self.mutation(enfant1.ordre), self.graph.calcul_distance_route(self.mutation(enfant1.ordre))))
                meilleure_pop.append(Route(self.mutation(enfant2.ordre), self.graph.calcul_distance_route(self.mutation(enfant2.ordre))))
                meilleure_pop.append(
                    Route(self.mutation(enfant3.ordre), self.graph.calcul_distance_route(self.mutation(enfant3.ordre))))
                meilleure_pop.append(
                    Route(self.mutation(enfant4.ordre), self.graph.calcul_distance_route(self.mutation(enfant4.ordre))))
                # Remplacement de la population
                self.population = meilleure_pop
                # Retourne la meilleure solution trouvée
                meilleure_route = min(self.population, key=lambda route: route.distance)

            affichage.route = meilleure_route
            affichage.canvas.delete("text_ordre")
            affichage.canvas.delete("lines")
            affichage.aff_best_routes(self.best_routes())
            affichage.mettre_a_jour_label_info(i, self.iterations)
            affichage.update()

        return "La meilleure route est " + str(meilleure_route.ordre) + " et sa distance est de " + str(meilleure_route.distance)







